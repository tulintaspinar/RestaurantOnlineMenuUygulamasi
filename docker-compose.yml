version: '3.4'

networks:
  backend:
  frontend:

services:
  apigateway:
    container_name: api-gateway
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: ApiGateway/ApiGateway/Dockerfile
    ports:
      - 8001:80
    networks:
      - backend
      - frontend

  burgerdb:
    container_name: burger-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment: 
       - ACCEPT_EULA=Y
       - SA_PASSWORD=password@12345#
    networks:
      - backend
    ports:
      - 18001:1433
  burgerwebapi:
    container_name: burger-api
    image: ${DOCKER_REGISTRY-}burgerwebapi
    build:
      context: .
      dockerfile: Microservices/BurgerWebAPI/Dockerfile
    networks:
      - backend
    environment:
      - DB_HOST=burgerdb
      - DB_NAME=DBMicroServices
      - DB_SA_PASSWORD=password@12345#

  drinkdb:
    container_name: drink-db
    image: mysql:8.0.29-oracle
    environment:
      - MYSQL_ROOT_PASSWORD=p@ssw0rd987*
    ports:
      - 18003:3306
    networks:
      - backend
  drinkwebapi:
    container_name: drink-api
    image: ${DOCKER_REGISTRY-}drinkwebapi
    build:
      context: .
      dockerfile: DrinkWebAPI/Dockerfile
    networks:
      - backend
    environment: 
      - DB_HOST=drinkdb
      - DB_NAME=DBMicroServices
      - DB_SA_PASSWORD=p@ssw0rd987*

  menudb:
    container_name: menu-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment: 
       - ACCEPT_EULA=Y
       - SA_PASSWORD=password@12345#
    networks:
      - backend
    ports:
      - 18005:1433
  menuwebapi:
    container_name: menu-api
    image: ${DOCKER_REGISTRY-}menuwebapi
    build:
      context: .
      dockerfile: MenuWebAPI/Dockerfile
    networks:
      - backend 
    environment: 
      - DB_HOST=menudb
      - DB_NAME=DBMicroServices
      - DB_SA_PASSWORD=password@12345#

  orderdb:
    container_name: order-db
    image: mongo
    ports:
      - 18007:27017
    networks:
      - backend
  orderwebapi:
    container_name: order-api
    image: ${DOCKER_REGISTRY-}orderwebapi
    build:
      context: .
      dockerfile: OrderWebAPI/Dockerfile
    networks:
      - backend
    environment:
      - DB_HOST=orderdb
      - DB_NAME=DBMicroServices

  mikroservicesui:
    container_name: mikroservicesui
    image: ${DOCKER_REGISTRY-}mikroservicesui
    build:
      context: .
      dockerfile: UI/MikroservicesUI/Dockerfile
    ports:
        - 8002:80
    networks:
        - frontend